user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    client_max_body_size 100M;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    sendfile on;
    keepalive_timeout 65;

    # Gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Rate limiting zone
    limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

    upstream frontend {
        server frontend:3000;
    }

    upstream backend {
        server backend-api:3000;
    }

    # Main server block
    server {
        listen 80;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Health check endpoint
        location /health {
            access_log off;

            # Aggregate health status from all services
            location = /health {
                return 200 'OK';
                add_header Content-Type text/plain;
            }

            # Frontend health
            location /health/frontend {
                proxy_pass http://frontend:3000/api/health;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
            }

            # Backend health
            location /health/backend {
                proxy_pass http://backend:3000/health;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
            }

            # MQTT Python Server health
            location /health/mqtt {
                proxy_pass http://mqtt-subscriber:8080/health;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
            }

            # MySQL health (through backend)
            location /health/mysql {
                proxy_pass http://backend:3000/health;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
            }

            # MQTT Broker health
            location /health/mqtt-broker {
                proxy_pass http://mosquitto:9001/$sys/broker/version;
                proxy_http_version 1.1;
                proxy_set_header Host $host;
            }
        }

        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Basic rate limiting
            limit_req zone=one burst=20 nodelay;
        }

        # Backend API routes
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Basic rate limiting
            limit_req zone=one burst=20 nodelay;
        }

        # WebSocket for MQTT over WebSocket (if needed)
        location /mqtt {
            proxy_pass http://mosquitto:9001;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }

        # Static files cache
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 30d;
            add_header Cache-Control "public, no-transform";
        }
    }
}
